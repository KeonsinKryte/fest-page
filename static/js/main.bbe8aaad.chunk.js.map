{"version":3,"sources":["utils/config/firebaseConfig.ts","storage/AuthStorage.ts","storage/PostStorage.ts","storage/Storage.ts","components/Dashboard/Dashboard.tsx","components/Banner/Banner.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","console","log","db","firebaseAuth","AuthStorage","auth","Object","classCallCheck","this","initializerDefineProperty","_descriptor","displayName","email","password","_this","createUserWithEmailAndPassword","then","data","userData","uid","user","mail","collection","doc","set","catch","error","signInWithEmailAndPassword","signOut","setUserOutListener","_this2","onAuthStateChanged","get","exists","message","observable","action","PostStorage","getAutor","onSnapshot","authStorage","postStorage","storage_Storage","storage","Storage","Storage_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","csvGetData","bind","cosineSingularityGeneral","csvGetPopulation","csvFest","compareByArrayGroup","imgArray","fetch","csvFilePath","response","csvReader","body","getReader","csvDecoder","TextDecoder","read","result","decode","value","undefined","forEach","element","csvDataLines","push","indexArray","scoreByGenres","scoreByGenresAvg","scoreByGenresMedian","scoreByGenresMin","scoreByGenresMax","scoreByArtists","scoreByArtistsAvg","scoreByArtistsMedian","scoreByArtistsMin","scoreByArtistsMax","scoreByFood","scoreByFoodAvg","scoreByFoodMedian","scoreByFoodMin","scoreByFoodMax","scoreByDrink","scoreByDrinkAvg","scoreByDrinkMedian","scoreByDrinkMin","scoreByDrinkMax","scoreByDiet","scoreByDietAvg","scoreByDietMedian","scoreByDietMin","scoreByDietMax","score","index","length","scoreData","catName","slice","medianByArray","leastMiseryByArray","mostPleasureByArray","averageByArray","random","Math","floor","population","name","age","img","csvPopulation","toJS","csvFetch","csvData","Papa","complete","_this3","festAvgGenres","festAvgGenresMin","festAvgGenresMax","festAvgArtists","festAvgArtistsMin","festAvgArtistsMax","festAvgDiet","festAvgDietMin","festAvgDietMax","festAvgFood","festAvgFoodMin","festAvgFoodMax","festAvgDrink","festAvgDrinkMin","festAvgDrinkMax","festAvgScore","_loop","sum","parseInt","festAvg","userDataAvg","festResult","festResults","_this4","csvSelectedGroup","groupAvgGenres","groupAvgGenresMin","groupAvgGenresMax","groupAvgArtists","groupAvgArtistsMin","groupAvgArtistsMax","groupAvgDiet","groupAvgDietMin","groupAvgDietMax","groupAvgFood","groupAvgFoodMin","groupAvgFoodMax","groupAvgDrink","groupAvgDrinkMin","groupAvgDrinkMax","groupAvgScore","_loop2","groupAvg","groupResult","groupResults","userIndex","d1","scoreFinal","scoreByGenresValues","scoreByGenresValuesAvg","scoreByGenresValuesMedian","scoreByGenresValuesMin","scoreByGenresValuesMax","scoreByGenresValuesStd","scoreByArtistsValues","scoreByArtistsValuesAvg","scoreByArtistsValuesMedian","scoreByArtistsValuesMin","scoreByArtistsValuesMax","scoreByArtistsValuesStd","scoreByFoodValues","scoreByFoodValuesAvg","scoreByFoodValuesMedian","scoreByFoodValuesMin","scoreByFoodValuesMax","scoreByFoodValuesStd","scoreByDrinkValues","scoreByDrinkValuesAvg","scoreByDrinkValuesMedian","scoreByDrinkValuesMin","scoreByDrinkValuesMax","scoreByDrinkValuesStd","scoreByDietValues","scoreByDietValuesAvg","scoreByDietValuesMedian","scoreByDietValuesMin","scoreByDietValuesMax","scoreByDietValuesStd","d2","cosineResults","sumD1D2","sumD1","sumD2","indexB","abs","sqrt","resultData","leastMiseryByArrayCosine","mostPleasureByArrayCosine","standardDerivation","cosineResultsObj","scoreByDietValuesMedianMedian","cosineResultsData","cosineRanking","rankingByArrayCosine","dataArray","dataArrayValues","parseFloat","sort","a","b","half","filter","math","observer","react_default","createElement","className","Header","size","List","horizontal","ordered","map","e","Item","key","Label","as","color","Icon","role","pop","Button","Group","onClick","csvSelected","Or","src","image","Image","Card","wrapped","ui","Content","Meta","Rating","maxRating","defaultRating","icon","Statistic","Value","animated","hidden","visible","Detail","alt","App","props","possibleConstructorReturn","getPrototypeOf","call","state","userState","setUserState","assertThisInitialized","userStateListener","csvGetDataAsync","setTimeout","setState","react_router_dom","components_Banner_Banner","components_Dashboard_Dashboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"weAiBAA,gBAV0B,CACtBC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,wCAIXC,QAAQC,IAAI,OAEL,gCAAMC,EAAKV,cAELW,GADkBX,YACHA,UAEbU,ICrBME,gBAIjB,SAAAA,EAAYF,EAASG,GAAYC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAI,KAHjCN,GAAU,KAGsBM,KAFhCH,KAAY,KAEoBC,OAAAG,EAAA,EAAAH,CAAAE,KAAA,OAAAE,EAAAF,MAC5BA,KAAKN,GAAKA,EACVM,KAAKH,KAAOA,4DAKMM,EAAqBC,EAAeC,GAAkB,IAAAC,EAAAN,KACxEA,KAAKH,KAAKU,+BAA+BH,EAAOC,GAC3CG,KAAK,SAACC,GACH,IAAIC,EAAW,CACXC,IAAKF,EAAKG,KAAKD,IACfP,MAAOK,EAAKG,KAAKC,KACjBV,eAGJG,EAAKZ,GAAGoB,WAAW,SAASC,IAAIN,EAAKG,KAAKD,KAAKK,IAAIN,GAC9CF,KAAK,WACFhB,QAAQC,IAAI,sBAEfwB,MAAM,SAACC,GACJ1B,QAAQC,IAAI,UAAWyB,OAEhCD,MAAM,SAACC,GACN1B,QAAQC,IAAIyB,oCAITd,EAAeC,GAC1BL,KAAKH,KAAKsB,2BAA2Bf,EAAOC,GACvCY,MAAM,SAACC,GACJ1B,QAAQC,IAAIyB,uCAKpBlB,KAAKH,KAAKuB,UAAUZ,KAAK,cAEtBS,MAAM,SAACC,GACN1B,QAAQC,IAAIyB,+CAIMG,GAA8C,IAAAC,EAAAtB,KACpEA,KAAKH,KAAK0B,mBAAmB,SAACX,GACtBA,EACAU,EAAK5B,GAAGoB,WAAW,SAASC,IAAIH,EAAKD,KAAKa,MACrChB,KAAK,SAACO,GACH,GAAIA,EAAIU,OAAQ,CACZ,IAAIf,EAAW,CACXC,IAAKC,EAAKD,IACVP,MAAOQ,EAAKR,MACZD,YAAaY,EAAIN,OAAON,aAG5BmB,EAAKV,KAAOF,EACZlB,QAAQC,IAAI,+BAAgC6B,EAAKV,MACjDS,GAAmB,QAEnB7B,QAAQC,IAAI,oCAEjBwB,MAAM,SAACC,GACN1B,QAAQC,IAAI,mCAAoCyB,EAAMQ,YAG9DJ,EAAKV,KAAO,KACZpB,QAAQC,IAAI,mBACZ4B,GAAmB,iDA9D9BM,8EAAuB,iDAEvBC,iHAqBAA,2GAOAA,sHAQAA,sFC/CgBC,gBAGjB,SAAAA,EAAYnC,GAAUI,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,GAAA7B,KAFtBN,GAAU,KAGNM,KAAKN,GAAKA,2DAGOiB,EAAamB,GAG9B9B,KAAKN,GAAGoB,WAAW,SAASC,IAAIJ,GAAKoB,WAAW,SAAChB,GACrCA,EAAIN,0DAJnBmB,iFCDCI,EAAc,IAAIpC,EAAYF,EAAIC,GAClCsC,EAAc,IAAIJ,EAAYnC,GA8lBrBwC,GAAA,CACXC,QAFY,iBA9kBZ,SAAAC,IAAetC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,GAAAtC,OAAAG,EAAA,EAAAH,CAAAE,KAAA,cAAAqC,EAAArC,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,eAAAsC,EAAAtC,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,gBAAAuC,EAAAvC,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,oBAAAwC,EAAAxC,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,gBAAAyC,EAAAzC,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,WAAA0C,EAAA1C,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,cAAA2C,EAAA3C,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,mBAAA4C,EAAA5C,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,eAAA6C,EAAA7C,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,cAAA8C,EAAA9C,MACXA,KAAK+C,WAAa/C,KAAK+C,WAAWC,KAAKhD,MACvCA,KAAKiD,yBAA2BjD,KAAKiD,yBAAyBD,KAAKhD,MACnEA,KAAKkD,iBAAmBlD,KAAKkD,iBAAiBF,KAAKhD,MACnDA,KAAKmD,QAAUnD,KAAKmD,QAAQH,KAAKhD,MACjCA,KAAKoD,oBAAsBpD,KAAKoD,oBAAoBJ,KAAKhD,MAEzDA,KAAKqD,SAAW,CAAC,8DAA+D,kEAC5E,+DAAgE,+DAChE,+DAAgE,4DAChE,kEAAmE,6DACnE,6DAA8D,gEAC9D,6DAA8D,8DAC9D,+DAAgE,gEAChE,gEAAiE,8DACjE,yHAMJ,OAAOC,MAAMtD,KAAKuD,aAAa/C,KAAK,SAAUgD,GAC1C,IAAIC,EAAYD,EAASE,KAAKC,YAC1BC,EAAa,IAAIC,YAAY,SAEjC,OAAOJ,EAAUK,OAAOtD,KAAK,SAAUuD,GACnC,OAAOH,EAAWI,OAAOD,EAAOE,8CAOzBF,GAAa,IAAAzD,EAAAN,KACxB+D,EAAOtD,MAAwB,OAAhBsD,EAAOtD,WAAiCyD,IAAhBH,EAAOtD,MAC9CsD,EAAOtD,KAAK0D,QAAQ,SAACC,QACDF,IAAZE,GAEA9D,EAAK+D,aAAaC,KAAKF,gDAUZ,IAAA9C,EAAAtB,KACvB,GAA0B,IAAtBA,KAAKqE,aAAT,CACA,IAAIE,EAAa,EACjBvE,KAAKqE,aAAaF,QAAQ,SAACC,GAiCvB,IAhCA,IAEII,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EA9BAC,EAAQ,GAgCHC,EAAQ,EAAGA,EAAQ5E,EAAK+C,aAAa,GAAG8B,OAAQD,IAAS,CAC9D,IAAIE,EAAY,CACZC,QAAS/E,EAAK+C,aAAa,GAAG6B,GAC9BD,MAAO7B,EAAQ8B,IAEnBD,EAAM3B,KAAK8B,GAGf5B,EAAgByB,EAAMK,MAAM,EAAG,IAC/B5B,EAAsBpD,EAAKiF,cAAc/B,GACzCG,EAAmBrD,EAAKkF,mBAAmBhC,EAAe,GAC1DI,EAAmBtD,EAAKmF,oBAAoBjC,EAAe,GAC3DC,EAAmBnD,EAAKoF,eAAelC,GAEvCK,EAAiBoB,EAAMK,MAAM,GAAI,IACjCvB,EAAuBzD,EAAKiF,cAAc1B,GAC1CG,EAAoB1D,EAAKkF,mBAAmB3B,EAAgB,GAC5DI,EAAoB3D,EAAKmF,oBAAoB5B,EAAgB,GAC7DC,EAAoBxD,EAAKoF,eAAe7B,GAExCe,EAAcK,EAAMK,MAAM,GAAI,IAC9BR,EAAoBxE,EAAKiF,cAAcX,GACvCG,EAAiBzE,EAAKkF,mBAAmBZ,EAAa,GACtDI,EAAiB1E,EAAKmF,oBAAoBb,EAAa,GACvDC,EAAiBvE,EAAKoF,eAAed,GAErCV,EAAce,EAAMK,MAAM,GAAI,IAC9BlB,EAAoB9D,EAAKiF,cAAcrB,GACvCG,EAAiB/D,EAAKkF,mBAAmBtB,EAAa,GACtDI,EAAiBhE,EAAKmF,oBAAoBvB,EAAa,GACvDC,EAAiB7D,EAAKoF,eAAexB,GAErCK,EAAeU,EAAMK,MAAM,GAAI,KAC/Bb,EAAqBnE,EAAKiF,cAAchB,GACxCG,EAAkBpE,EAAKkF,mBAAmBjB,EAAc,GACxDI,EAAkBrE,EAAKmF,oBAAoBlB,EAAc,GACzDC,EAAkBlE,EAAKoF,eAAenB,GAEtC,IAAIoB,EAASC,KAAKC,MAAMD,KAAKD,UAAYrF,EAAK+B,SAAS8C,OAAS,IAAM,EAGlEW,EAAa,CACbC,KAAM3C,EAAQ,GACd4C,IAAK5C,EAAQ,GACb8B,MAAO3B,EACP0C,IAAK3F,EAAK+B,SAASsD,GAEnBV,MAAOA,EAEPzB,cAAeA,EACfE,oBAAqBA,EACrBC,iBAAkBA,EAClBC,iBAAkBA,EAClBH,iBAAkBA,EAElBI,eAAgBA,EAChBE,qBAAsBA,EACtBC,kBAAmBA,EACnBC,kBAAmBA,EACnBH,kBAAmBA,EAEnBc,YAAaA,EACbE,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBH,eAAgBA,EAEhBX,YAAaA,EACbE,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBH,eAAgBA,EAEhBI,aAAcA,EACdE,mBAAoBA,EACpBC,gBAAiBA,EACjBC,gBAAiBA,EACjBH,gBAAiBA,GAGrBlE,EAAK4F,cAAc5C,KAAKwC,GACxBvC,GAAc,IAElB/E,QAAQC,IAAI0H,YAAKnH,KAAKkH,yLAKFlH,KAAKoH,kBAArBC,SAEJC,QAAWD,EAAS,CAChBE,SAAUvH,KAAK+C,iJAML,IAAAyE,EAAAxH,KACd,GAAkC,IAA9BA,KAAKkH,cAAcf,OAAvB,CAuBA,IAtBA,IAEIsB,EACAC,EACAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EApBAC,EAAe,GAFLC,EAAA,SAwBLvC,GACS,EACVwC,EAAM,EAEVlB,EAAKN,cAAcZ,MAAM,EAAG,KAAKnC,QAAQ,SAACC,GAEtCsE,GAAQC,SAASvE,EAAQ6B,MAAMC,GAAOD,SAG1C2C,EAAWF,EAAMC,SAASnB,EAAKN,cAAcf,QAG7C,IAAI0C,EAAc,CACdxC,QAASmB,EAAKnD,aAAa,GAAG6B,GAC9BD,MAAO2C,GAGXJ,EAAalE,KAAKuE,IAjBb3C,EAAQ,EAAGA,EAAQ,IAAKA,IAAS,KAClC0C,EACAF,EAFkCD,EAAjCvC,GAoBTuB,EAAgBe,EAAalC,MAAM,EAAG,IACtCoB,EAAmB1H,KAAKwG,mBAAmBiB,EAAe,GAAGnB,MAAM,EAAG,GACtEqB,EAAmB3H,KAAKyG,oBAAoBgB,EAAe,GAAGnB,MAAM,EAAG,GAEvEsB,EAAiBY,EAAalC,MAAM,GAAI,IACxCuB,EAAoB7H,KAAKwG,mBAAmBoB,EAAgB,GAAGtB,MAAM,EAAG,GACxEwB,EAAoB9H,KAAKyG,oBAAoBmB,EAAgB,GAAGtB,MAAM,EAAG,GAEzEyB,EAAcS,EAAalC,MAAM,GAAI,IACrC0B,EAAiBhI,KAAKwG,mBAAmBuB,EAAa,GAAGzB,MAAM,EAAG,GAClE2B,EAAiBjI,KAAKyG,oBAAoBsB,EAAa,GAAGzB,MAAM,EAAG,GAEnE4B,EAAcM,EAAalC,MAAM,GAAI,IACrC6B,EAAiBnI,KAAKwG,mBAAmB0B,EAAa,GAAG5B,MAAM,EAAG,GAClE8B,EAAiBpI,KAAKyG,oBAAoByB,EAAa,GAAG5B,MAAM,EAAG,GAEnE+B,EAAeG,EAAalC,MAAM,GAAI,KACtCgC,EAAkBtI,KAAKwG,mBAAmB6B,EAAc,GAAG/B,MAAM,EAAG,GACpEiC,EAAkBvI,KAAKyG,oBAAoB4B,EAAc,GAAG/B,MAAM,EAAG,GAErE,IAAIwC,EAAa,CACbN,aAAcA,EAEdf,cAAeA,EACfC,iBAAkBA,EAClBC,iBAAkBA,EAElBC,eAAgBA,EAChBC,kBAAmBA,EACnBC,kBAAmBA,EAEnBC,YAAaA,EACbC,eAAgBA,EAChBC,eAAgBA,EAEhBC,YAAaA,EACbC,eAAgBA,EAChBC,eAAgBA,EAEhBC,aAAcA,EACdC,gBAAiBA,EACjBC,gBAAiBA,GAGrBvI,KAAK+I,YAAYzE,KAAKwE,GACtBtJ,QAAQC,IAAI0H,YAAKnH,KAAK+I,6DAKI,IAAAC,EAAAhJ,KAC1B,GAAqC,IAAjCA,KAAKiJ,iBAAiB9C,OAA1B,CAuBA,IAtBA,IAEI+C,EACAC,EACAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EApBAC,EAAgB,GAFMC,EAAA,SAwBjBhE,GACU,EACXwC,EAAM,EAEVM,EAAKC,iBAAiB3C,MAAM,EAAG,KAAKnC,QAAQ,SAACC,GAEzCsE,GAAQC,SAASvE,EAAQ6B,MAAMC,GAAOD,SAG1CkE,EAAYzB,EAAMC,SAASK,EAAKC,iBAAiB9C,QAGjD,IAAI0C,EAAc,CACdxC,QAAS2C,EAAK3E,aAAa,GAAG6B,GAC9BD,MAAOkE,GAGXF,EAAc3F,KAAKuE,IAjBd3C,EAAQ,EAAGA,EAAQ,IAAKA,IAAS,KAClCiE,EACAzB,EAFkCwB,EAAjChE,GAoBTgD,EAAiBe,EAAc3D,MAAM,EAAG,IACxC6C,EAAoBnJ,KAAKwG,mBAAmB0C,EAAgB,GAAG5C,MAAM,EAAG,GACxE8C,EAAoBpJ,KAAKyG,oBAAoByC,EAAgB,GAAG5C,MAAM,EAAG,GAEzE+C,EAAkBY,EAAc3D,MAAM,GAAI,IAC1CgD,EAAqBtJ,KAAKwG,mBAAmB6C,EAAiB,GAAG/C,MAAM,EAAG,GAC1EiD,EAAqBvJ,KAAKyG,oBAAoB4C,EAAiB,GAAG/C,MAAM,EAAG,GAE3EkD,EAAeS,EAAc3D,MAAM,GAAI,IACvCmD,EAAkBzJ,KAAKwG,mBAAmBgD,EAAc,GAAGlD,MAAM,EAAG,GACpEoD,EAAkB1J,KAAKyG,oBAAoB+C,EAAc,GAAGlD,MAAM,EAAG,GAErEqD,EAAeM,EAAc3D,MAAM,GAAI,IACvCsD,EAAkB5J,KAAKwG,mBAAmBmD,EAAc,GAAGrD,MAAM,EAAG,GACpEuD,EAAkB7J,KAAKyG,oBAAoBkD,EAAc,GAAGrD,MAAM,EAAG,GAErEwD,EAAgBG,EAAc3D,MAAM,GAAI,KACxCyD,EAAmB/J,KAAKwG,mBAAmBsD,EAAe,GAAGxD,MAAM,EAAG,GACtE0D,EAAmBhK,KAAKyG,oBAAoBqD,EAAe,GAAGxD,MAAM,EAAG,GAEvE,IAAI8D,EAAc,CACdH,cAAeA,EAEff,eAAgBA,EAChBC,kBAAmBA,EACnBC,kBAAmBA,EAEnBC,gBAAiBA,EACjBC,mBAAoBA,EACpBC,mBAAoBA,EAEpBC,aAAcA,EACdC,gBAAiBA,EACjBC,gBAAiBA,EAEjBC,aAAcA,EACdC,gBAAiBA,EACjBC,gBAAiBA,EAEjBC,cAAeA,EACfC,iBAAkBA,EAClBC,iBAAkBA,GAGtBhK,KAAKqK,aAAa/F,KAAK8F,GACvB5K,QAAQC,IAAI0H,YAAKiD,sDAKYE,GAC7B,GAAiC,IAA7BtK,KAAKqE,aAAa8B,OAAtB,CAGA,IAFA,IAAIoE,EAAKvK,KAAKqE,aAAaiG,GAElBpE,EAAQ,EAAGA,EAAQlG,KAAKqE,aAAa8B,OAAQD,IAAS,CAiD3D,IAhDA,IAUIsE,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA7CAC,EAAKvM,KAAKqE,aAAa6B,GAEvBsG,EAAgB,GAEhBC,EAAU,EACVC,EAAQ,EACRC,EAAQ,EA0CHC,EAAS,EAAGA,EAASL,EAAGpG,OAAQyG,IAAU,CAC/CH,GAAY9D,SAAS4B,EAAGqC,IAAWjE,SAAS4D,EAAGK,IAC/CF,GAAU/D,SAAS4B,EAAGqC,IAAWjE,SAAS4B,EAAGqC,IAC7CD,GAAUhE,SAAS4D,EAAGK,IAAWjE,SAAS4D,EAAGK,IAK7C,IAAI7I,EAAU0I,GAHN7F,KAAKiG,IAAIjG,KAAKkG,KAAKJ,IACnB9F,KAAKiG,IAAIjG,KAAKkG,KAAKH,KAEgB,IAIvCI,EAAa,CACb1G,QAASrG,KAAKqE,aAAa,GAAGuI,GAC9B3G,MAAOlC,GAGXyI,EAAclI,KAAKyI,GAGvBtC,EAAsB+B,EAAclG,MAAM,EAAG,IAC7CqE,EAA4B3K,KAAKuG,cAAckE,GAC/CG,EAAyB5K,KAAKgN,yBAAyBvC,GAAqBnE,MAAM,EAAG,GACrFuE,EAAyB7K,KAAKiN,0BAA0BxC,GAAqBnE,MAAM,EAAG,GACtFoE,EAAyB1K,KAAK0G,eAAe+D,GAC7CK,EAAyB9K,KAAKkN,mBAAmBzC,GAEjDM,EAAuByB,EAAclG,MAAM,GAAI,IAC/C2E,EAA6BjL,KAAKuG,cAAcwE,GAChDG,EAA0BlL,KAAKgN,yBAAyBjC,GAAsBzE,MAAM,EAAG,GACvF6E,EAA0BnL,KAAKiN,0BAA0BlC,GAAsBzE,MAAM,EAAG,GACxF0E,EAA0BhL,KAAK0G,eAAeqE,GAC9CK,EAA0BpL,KAAKkN,mBAAmBnC,GAElDkB,EAAoBO,EAAclG,MAAM,GAAI,IAC5C6F,EAA0BnM,KAAKuG,cAAc0F,GAC7CG,EAAuBpM,KAAKgN,yBAAyBf,GAAmB3F,MAAM,EAAG,GACjF+F,EAAuBrM,KAAKiN,0BAA0BhB,GAAmB3F,MAAM,EAAG,GAClF4F,EAAuBlM,KAAK0G,eAAeuF,GAC3CK,EAAuBtM,KAAKkN,mBAAmBjB,GAE/CZ,EAAoBmB,EAAclG,MAAM,GAAI,IAC5CiF,EAA0BvL,KAAKuG,cAAc8E,GAC7CG,EAAuBxL,KAAKgN,yBAAyB3B,GAAmB/E,MAAM,EAAG,GACjFmF,EAAuBzL,KAAKiN,0BAA0B5B,GAAmB/E,MAAM,EAAG,GAClFgF,EAAuBtL,KAAK0G,eAAe2E,GAC3CK,EAAuB1L,KAAKkN,mBAAmB7B,GAE/CM,EAAqBa,EAAclG,MAAM,GAAI,KAC7CuF,EAA2B7L,KAAKuG,cAAcoF,GAC9CG,EAAwB9L,KAAKgN,yBAAyBrB,GAAoBrF,MAAM,EAAG,GACnFyF,EAAwB/L,KAAKiN,0BAA0BtB,GAAoBrF,MAAM,EAAG,GACpFsF,EAAwB5L,KAAK0G,eAAeiF,GAC5CK,EAAwBhM,KAAKkN,mBAAmBvB,GAEhD,IAAIhF,EAASC,KAAKC,MAAMD,KAAKD,UAAY3G,KAAKqD,SAAS8C,OAAS,IAAM,EAEtEqE,GAAeE,EAAyBM,EAA0BkB,EAAuBZ,EAAuBM,GAAyB,EAEzI,IAAIuB,EAAmB,CACnBpG,KAAMwF,EAAG,GACTvF,IAAKuF,EAAG,GACRtF,IAAKjH,KAAKqD,SAASsD,GACnB6F,cAAeA,EAEf/B,oBAAqBA,EACrBE,0BAA2BA,EAC3BC,uBAAwBA,EACxBC,uBAAwBA,EACxBH,uBAAwBA,EACxBI,uBAAwBA,EAExBC,qBAAsBA,EACtBE,2BAA4BA,EAC5BC,wBAAyBA,EACzBC,wBAAyBA,EACzBH,wBAAyBA,EACzBI,wBAAyBA,EAEzBa,kBAAmBA,EACnBmB,8BAA+BjB,EAC/BC,qBAAsBA,EACtBC,qBAAsBA,EACtBH,qBAAsBA,EACtBI,qBAAsBA,EAEtBjB,kBAAmBA,EACnBE,wBAAyBA,EACzBC,qBAAsBA,EACtBC,qBAAsBA,EACtBH,qBAAsBA,EACtBI,qBAAsBA,EAEtBC,mBAAoBA,EACpBE,yBAA0BA,EAC1BC,sBAAuBA,EACvBC,sBAAuBA,EACvBH,sBAAuBA,EACvBI,sBAAuBA,EAEvBxB,WAAYA,GAEhBxK,KAAKqN,kBAAkB/I,KAAK6I,GAEhCnN,KAAKsN,cAAgBtN,KAAKuN,qBAAqBvN,KAAKqN,mBACpD7N,QAAQC,IAAI0H,YAAKnH,KAAKqN,oBACtB7N,QAAQC,IAAI0H,YAAKnH,KAAKsN,uDAGJE,GAClB,IAAIC,EAAuB,GAC3BD,EAAUrJ,QAAQ,SAACC,GACfqJ,EAAgBnJ,KAAKoJ,WAAWtJ,EAAQ6B,UAI5CwH,EAAgBE,KAAK,SAAUC,EAAQC,GAAU,OAAOD,EAAIC,IAE5D,IAAIC,EAAOlH,KAAKC,MAAM4G,EAAgBtH,OAAS,GAE/C,OAAIsH,EAAgBtH,OAAS,EAClBsH,EAAgBK,IAEfL,EAAgBK,EAAO,GAAKL,EAAgBK,IAAS,+CAIxCN,GACzB,OAAOA,EAAUG,KAAK,SAACC,EAAQC,GAAT,OAAqBD,EAAEpD,WAAaqD,EAAErD,WAAc,GAAK,qDAGlDgD,GAC7B,OAAOA,EAAUG,KAAK,SAACC,EAAQC,GAAT,OAAqBD,EAAE3H,MAAQ4H,EAAE5H,MAAS,GAAK,sDAGvCuH,GAC9B,OAAOA,EAAUG,KAAK,SAACC,EAAQC,GAAT,OAAqBD,EAAE3H,MAAQ4H,EAAE5H,MAAS,GAAK,+CAG9CuH,EAAgBO,GACvC,OAAOP,EAAUO,OAAO,SAACH,GAAD,OAAYA,EAAE3H,OAAS8H,gDAGvBP,EAAgBO,GACxC,OAAOP,EAAUO,OAAO,SAACH,GAAD,OAAYA,EAAE3H,OAAS8H,2CAG5BP,GACnB,GAAyB,IAArBA,EAAUrH,OAAd,CACA,IAAIuC,EAAM,EAOV,OALA8E,EAAUrJ,QAAQ,SAACC,GACfsE,GAAOC,SAASvE,EAAQ6B,SAEtByC,EAAM8E,EAAUrH,mDAKCqH,GACvB,IAAIC,EAAuB,GAI3B,OAHAD,EAAUrJ,QAAQ,SAACC,GACfqJ,EAAgBnJ,KAAKoJ,WAAWtJ,EAAQ6B,UAErC+H,MAASP,qDArlBnB9L,6EAAiC,2EACjCA,6EAA+B,iDAC/BA,6EAAgC,qDAChCA,6EAAoC,iDACpCA,6EAAgC,4CAChCA,6EAA2B,+CAC3BA,8EAAiC,mDACjCA,6EAAmC,gDACnCA,6EAA+B,+CAC/BA,6EAA8B,0CAsB9BC,gHAaAA,wHAeAA,qHAqIAA,wHA8FAA,yIA8FAA,mIAkKAA,+HAkBAA,0IAIAA,+IAIAA,yIAIAA,mIAIAA,+HAIAA,8HAYAA,uFAYDI,cACAC,eC/LWgM,eAnaG,WACd,OACIC,EAAAN,EAAAO,cAAA,OAAKC,UAAU,uBACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,gBACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,yBACXF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,yBACAD,EAAAN,EAAAO,cAAA,UAAID,EAAAN,EAAAO,cAAA,kBACJD,EAAAN,EAAAO,cAAA,iDAAwCD,EAAAN,EAAAO,cAAA,WAAxC,6BAGAD,EAAAN,EAAAO,cAACE,EAAA,EAAD,CAAQC,KAAK,SAAb,iBACAJ,EAAAN,EAAAO,cAACI,EAAA,EAAD,CAAMC,YAAU,EAACC,SAAO,GACnBtM,GAAQA,QAAQ4G,YAAY,IAAM5G,GAAQA,QAAQ4G,YAAY,GAAGpB,iBAAiB+G,IAAI,SAACC,GACpF,OACIT,EAAAN,EAAAO,cAACI,EAAA,EAAKK,KAAN,CAAWC,IAAKF,EAAEtI,SACd6H,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,UAChBd,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMX,KAAK,MAAMvH,KAAK,UACrB4H,EAAEtI,aAMvB6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAACE,EAAA,EAAD,CAAQC,KAAK,SAAb,uCACAJ,EAAAN,EAAAO,cAACI,EAAA,EAAD,CAAMC,YAAU,EAACC,SAAO,GACnBtM,GAAQA,QAAQ4G,YAAY,IAAM5G,GAAQA,QAAQ4G,YAAY,GAAGjB,kBAAkB4G,IAAI,SAACC,GACrF,OACIT,EAAAN,EAAAO,cAACI,EAAA,EAAKK,KAAN,CAAWC,IAAKF,EAAEtI,SACd6H,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,QAChBd,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMX,KAAK,MAAMvH,KAAK,SACrB4H,EAAEtI,aAMvB6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAACE,EAAA,EAAD,CAAQC,KAAK,SAAb,sCACAJ,EAAAN,EAAAO,cAACI,EAAA,EAAD,CAAMC,YAAU,EAACC,SAAO,GACnBtM,GAAQA,QAAQ4G,YAAY,IAAM5G,GAAQA,QAAQ4G,YAAY,GAAGX,eAAesG,IAAI,SAACC,GAClF,OACIT,EAAAN,EAAAO,cAACI,EAAA,EAAKK,KAAN,CAAWC,IAAKF,EAAEtI,SACd6H,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,UAChBd,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMX,KAAK,MAAMvH,KAAK,SACrB4H,EAAEtI,aAMvB6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAACE,EAAA,EAAD,CAAQC,KAAK,SAAb,yCACAJ,EAAAN,EAAAO,cAACI,EAAA,EAAD,CAAMC,YAAU,EAACC,SAAO,GACnBtM,GAAQA,QAAQ4G,YAAY,IAAM5G,GAAQA,QAAQ4G,YAAY,GAAGR,gBAAgBmG,IAAI,SAACC,GACnF,OACIT,EAAAN,EAAAO,cAACI,EAAA,EAAKK,KAAN,CAAWC,IAAKF,EAAEtI,SACd6H,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,QAChBd,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMX,KAAK,MAAMvH,KAAK,QACrB4H,EAAEtI,SAEP6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,iBAOxBD,EAAAN,EAAAO,cAAA,OAAKC,UAAU,iBACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,gCACXF,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,gDACtBjM,GAAQA,QAAQ+E,eAAiB/E,GAAQA,QAAQ+E,cAAcwH,IAAI,SAACS,GACjE,GAAkB,IAAdA,EAAIjJ,MACR,OACIgI,EAAAN,EAAAO,cAAA,OAAKe,KAAK,WAAWd,UAAU,OAAOS,IAAKM,EAAIjJ,OAC3CgI,EAAAN,EAAAO,cAAA,OAAKC,UAAU,8BACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,yBACXF,EAAAN,EAAAO,cAACiB,EAAA,EAAOC,MAAR,CAAcf,KAAK,QACfJ,EAAAN,EAAAO,cAACiB,EAAA,EAAD,CAAQE,QAAS,WACbnN,GAAQA,QAAQoN,YAAcJ,EAAIjJ,MAClC/D,GAAQA,QAAQkL,kBAAoB,GACpClL,GAAQA,QAAQc,yBAAyBkM,EAAIjJ,SAHjD,QAKAgI,EAAAN,EAAAO,cAACiB,EAAA,EAAOI,GAAR,MACAtB,EAAAN,EAAAO,cAACiB,EAAA,EAAD,CAAQE,QAAS,WACbnN,GAAQA,QAAQkI,aAAe,GAC/BlI,GAAQA,QAAQ8G,iBAAiB3E,KAAKnC,GAAQA,QAAQ+E,cAAciI,EAAIjJ,QACxE/D,GAAQA,QAAQiB,wBAHpB,UAQZ8K,EAAAN,EAAAO,cAAA,OAAKsB,IAAKN,EAAIlI,IAAKmH,UAAU,oBAC7BF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,UAAUe,EAAIpI,MAC3BmH,EAAAN,EAAAO,cAAA,OAAKC,UAAU,eAAf,QACSF,EAAAN,EAAAO,cAAA,SAAIgB,EAAInI,WAOrCkH,EAAAN,EAAAO,cAAA,mCACAD,EAAAN,EAAAO,cAAA,OAAKC,UAAU,aACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACVjM,GAAQA,QAAQ8G,kBAAoB9G,GAAQA,QAAQ8G,iBAAiByF,IAAI,SAACC,GACvE,OACIT,EAAAN,EAAAO,cAAA,OAAKC,UAAU,iBACXF,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOD,IAAKF,EAAE5H,KAAMgI,GAAG,IAAIW,OAAK,EAACpB,KAAK,UAClCJ,EAAAN,EAAAO,cAACwB,EAAA,EAAD,CAAOF,IAAKd,EAAE1H,IAAKqH,KAAK,WACvBK,EAAE5H,KACFvH,QAAQC,IAAIkP,QAMjCT,EAAAN,EAAAO,cAAA,0CACAD,EAAAN,EAAAO,cAACE,EAAA,EAAD,CAAQC,KAAK,SAAb,iBACCnM,GAAQA,QAAQkI,aAAa,IAAM7K,QAAQC,IAAI,MAAO0C,GAAQA,QAAQkI,aAAa,GAAGjB,mBACvF8E,EAAAN,EAAAO,cAACI,EAAA,EAAD,CAAMC,YAAU,EAACC,SAAO,GACnBtM,GAAQA,QAAQkI,aAAa,IAAMlI,GAAQA,QAAQkI,aAAa,GAAGjB,kBAAkBsF,IAAI,SAACC,GACvF,OACIT,EAAAN,EAAAO,cAACI,EAAA,EAAKK,KAAN,CAAWC,IAAKF,EAAEtI,SACd6H,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,UAChBd,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMX,KAAK,QAAQvH,KAAK,UACvB4H,EAAEtI,aAMvB6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAACE,EAAA,EAAD,CAAQC,KAAK,SAAb,8CACAJ,EAAAN,EAAAO,cAACI,EAAA,EAAD,CAAMC,YAAU,EAACC,SAAO,GACnBtM,GAAQA,QAAQkI,aAAa,IAAMlI,GAAQA,QAAQkI,aAAa,GAAGd,mBAAmBmF,IAAI,SAACC,GACxF,OACIT,EAAAN,EAAAO,cAACI,EAAA,EAAKK,KAAN,CAAWC,IAAKF,EAAEtI,SACd6H,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,QAChBd,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMX,KAAK,QAAQvH,KAAK,SACvB4H,EAAEtI,aAMvB6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAACE,EAAA,EAAD,CAAQC,KAAK,SAAb,6CACAJ,EAAAN,EAAAO,cAACI,EAAA,EAAD,CAAMC,YAAU,EAACC,SAAO,GACnBtM,GAAQA,QAAQkI,aAAa,IAAMlI,GAAQA,QAAQkI,aAAa,GAAGR,gBAAgB6E,IAAI,SAACC,GACrF,OACIT,EAAAN,EAAAO,cAACI,EAAA,EAAKK,KAAN,CAAWC,IAAKF,EAAEtI,SACd6H,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,UAChBd,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMX,KAAK,QAAQvH,KAAK,SACvB4H,EAAEtI,aAMvB6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAACE,EAAA,EAAD,CAAQC,KAAK,SAAb,gDACAJ,EAAAN,EAAAO,cAACI,EAAA,EAAD,CAAMC,YAAU,EAACC,SAAO,GACnBtM,GAAQA,QAAQkI,aAAa,IAAMlI,GAAQA,QAAQkI,aAAa,GAAGL,iBAAiB0E,IAAI,SAACC,GACtF,OACIT,EAAAN,EAAAO,cAACI,EAAA,EAAKK,KAAN,CAAWC,IAAKF,EAAEtI,SACd6H,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,QAChBd,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMX,KAAK,QAAQvH,KAAK,QACvB4H,EAAEtI,SAEP6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,iBAQxBD,EAAAN,EAAAO,cAAA,OAAKC,UAAU,kBACXF,EAAAN,EAAAO,cAAA,qBACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,8BACvBF,EAAAN,EAAAO,cAAA,OAAKe,KAAK,WAAWd,UAAU,QAC3BF,EAAAN,EAAAO,cAAA,OACIsB,IAAKtN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAatI,IAC9HmH,UAAU,yBAEdF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UAASF,EAAAN,EAAAO,cAAA,SAAGD,EAAAN,EAAAO,cAAA,SAAIhM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAaxI,QAD5J,OAEQmH,EAAAN,EAAAO,cAAA,SAAGD,EAAAN,EAAAO,cAAA,SAAIhM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAavI,OAExIkH,EAAAN,EAAAO,cAAA,oDAGRD,EAAAN,EAAAO,cAAA,OAAKC,UAAU,8BACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,OACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,4BAAb,gBACAF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,sBACtBjM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAa3K,iBAAiB8J,IAAI,SAACC,GAC5I,OACIT,EAAAN,EAAAO,cAAA,OAAKU,IAAKF,EAAEtI,QAAUsI,EAAE1I,MAAOiJ,KAAK,WAAWd,UAAU,QACrDF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,wBAAwBO,EAAEtI,eAO/D6H,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,0BAAb,gBACAF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,sBACtBjM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAa5K,iBAAiB+J,IAAI,SAACC,GAC5I,OACIT,EAAAN,EAAAO,cAAA,OAAKU,IAAKF,EAAEtI,QAAUsI,EAAE1I,MAAOiJ,KAAK,WAAWd,UAAU,QACrDF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,sBAAsBO,EAAEtI,iBASrE6H,EAAAN,EAAAO,cAAA,OAAKC,UAAU,8BACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,OACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,4BAAb,iBACAF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,sBACtBjM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAatK,kBAAkByJ,IAAI,SAACC,GAC7I,OACIT,EAAAN,EAAAO,cAAA,OAAKU,IAAKF,EAAEtI,QAAUsI,EAAE1I,MAAOiJ,KAAK,WAAWd,UAAU,QACrDF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,wBAAwBO,EAAEtI,eAO/D6H,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,0BAAb,iBACAF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,sBACtBjM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAavK,kBAAkB0J,IAAI,SAACC,GAC7I,OACIT,EAAAN,EAAAO,cAAA,OAAKU,IAAKF,EAAEtI,QAAUsI,EAAE1I,MAAOiJ,KAAK,WAAWd,UAAU,QACrDF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,sBAAsBO,EAAEtI,iBASrE6H,EAAAN,EAAAO,cAAA,OAAKC,UAAU,8BACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,OACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,4BAAb,eACAF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,sBACtBjM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAajK,eAAeoJ,IAAI,SAACC,GAC1I,OACIT,EAAAN,EAAAO,cAAA,OAAKU,IAAKF,EAAEtI,QAAUsI,EAAE1I,MAAOiJ,KAAK,WAAWd,UAAU,QACrDF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,wBAAwBO,EAAEtI,eAO/D6H,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,0BAAb,eACAF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,sBACtBjM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAalK,eAAeqJ,IAAI,SAACC,GAC1I,OACIT,EAAAN,EAAAO,cAAA,OAAKU,IAAKF,EAAEtI,QAAUsI,EAAE1I,MAAOiJ,KAAK,WAAWd,UAAU,QACrDF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,sBAAsBO,EAAEtI,iBASrE6H,EAAAN,EAAAO,cAAA,OAAKC,UAAU,8BACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,OACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,4BAAb,gBACAF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,sBACtBjM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAa5J,gBAAgB+I,IAAI,SAACC,GAC3I,OACIT,EAAAN,EAAAO,cAAA,OAAKU,IAAKF,EAAEtI,QAAUsI,EAAE1I,MAAOiJ,KAAK,WAAWd,UAAU,QACrDF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,wBAAwBO,EAAEtI,eAO/D6H,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,0BAAb,gBACAF,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKe,KAAK,OAAOd,UAAU,sBACtBjM,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,cAAgBpN,GAAQA,QAAQ+E,cAAc/E,GAAQA,QAAQoN,aAAa7J,gBAAgBgJ,IAAI,SAACC,GAC3I,OACIT,EAAAN,EAAAO,cAAA,OAAKU,IAAKF,EAAEtI,QAAUsI,EAAE1I,MAAOiJ,KAAK,WAAWd,UAAU,QACrDF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,WACXF,EAAAN,EAAAO,cAAA,KAAGC,UAAU,sBAAsBO,EAAEtI,iBASrE6H,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKC,UAAU,YACXF,EAAAN,EAAAO,cAAA,gDACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKC,UAAU,8BACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAACyB,EAAA,EAAD,CAAMZ,MAAM,QACRd,EAAAN,EAAAO,cAACwB,EAAA,EAAD,CAAOF,IAAKtN,GAAQA,QAAQmL,cAAc,IAAMnL,GAAQA,QAAQmL,cAAc,GAAGrG,IAAK4I,SAAO,EAACC,IAAI,IAClG5B,EAAAN,EAAAO,cAACyB,EAAA,EAAKG,QAAN,KACI7B,EAAAN,EAAAO,cAACyB,EAAA,EAAKvB,OAAN,KAAclM,GAAQA,QAAQmL,cAAc,IAAMnL,GAAQA,QAAQmL,cAAc,GAAGvG,MACnFmH,EAAAN,EAAAO,cAACyB,EAAA,EAAKI,KAAN,YAAgB7N,GAAQA,QAAQmL,cAAc,IAAMnL,GAAQA,QAAQmL,cAAc,GAAGtG,KACpF7E,GAAQA,QAAQmL,cAAc,IAAM9N,QAAQC,IAAI0C,GAAQA,QAAQmL,cAAc,IAC/EY,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAC8B,EAAA,EAAD,CAAQC,UAAW,EAAGC,cAAe,EAAGC,KAAK,QAAQ9B,KAAK,eAItEJ,EAAAN,EAAAO,cAAA,OAAKC,UAAU,UACXF,EAAAN,EAAAO,cAACkC,EAAA,EAAD,CAAWrB,MAAM,QACbd,EAAAN,EAAAO,cAACkC,EAAA,EAAUC,MAAX,KAAkBnO,GAAQA,QAAQmL,cAAc,IAAM3E,SAASxG,GAAQA,QAAQmL,cAAc,GAAG9C,YAAhG,KACA0D,EAAAN,EAAAO,cAACkC,EAAA,EAAUvB,MAAX,eAEJZ,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAACiB,EAAA,EAAD,CAAQmB,SAAS,WAAWvB,MAAM,QAC9Bd,EAAAN,EAAAO,cAACiB,EAAA,EAAOW,QAAR,CAAgBS,QAAM,GAAtB,QACAtC,EAAAN,EAAAO,cAACiB,EAAA,EAAOW,QAAR,CAAgBU,SAAO,GACnBvC,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMlI,KAAK,eAM/BmH,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,OAAKC,UAAU,YACXF,EAAAN,EAAAO,cAAA,8CACAD,EAAAN,EAAAO,cAAA,WACAD,EAAAN,EAAAO,cAAA,WACChM,GAAQA,QAAQmL,eAAiBnL,GAAQA,QAAQmL,cAAchH,MAAM,EAAG,GAAGoI,IAAI,SAACC,GAC7E,OACIT,EAAAN,EAAAO,cAAA,OAAKC,UAAU,uBACXF,EAAAN,EAAAO,cAACW,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,SAASU,OAAK,EAACpB,KAAK,OACpCJ,EAAAN,EAAAO,cAACwB,EAAA,EAAD,CAAOF,IAAKd,EAAE1H,IAAKqH,KAAK,QACvBK,EAAE5H,KACHmH,EAAAN,EAAAO,cAACW,EAAA,EAAM4B,OAAP,KAAcxC,EAAAN,EAAAO,cAAA,SAAIQ,EAAE3H,MACpBkH,EAAAN,EAAAO,cAACW,EAAA,EAAM4B,OAAP,KAAcxC,EAAAN,EAAAO,cAAA,SAAIxF,SAASgG,EAAEnE,YAAf,gBCjZvCyD,uBAVA,WACX,OACIC,EAAAN,EAAAO,cAAA,OAAKC,UAAU,cACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,yBACXF,EAAAN,EAAAO,cAAA,OAAKC,UAAU,2BAA2BqB,IAAI,4BAA4BkB,IAAI,cCQxFC,eACJ,SAAAA,EAAYC,GAAY,IAAAvQ,EAAA,OAAAR,OAAAC,EAAA,EAAAD,CAAAE,KAAA4Q,IACtBtQ,EAAAR,OAAAgR,EAAA,EAAAhR,CAAAE,KAAAF,OAAAiR,EAAA,EAAAjR,CAAA8Q,GAAAI,KAAAhR,KAAM6Q,KAEDI,MAAQ,CACXC,WAAW,GAGb5Q,EAAK6Q,aAAe7Q,EAAK6Q,aAAanO,KAAlBlD,OAAAsR,EAAA,EAAAtR,CAAAQ,IAPEA,mFAYtB6B,GAAQH,YAAYqP,kBAAkBrR,KAAKmR,cAC3ChP,GAAQA,QAAQmP,kBAChBC,WAAW,WACTpP,GAAQA,QAAQe,mBAChBf,GAAQA,QAAQgB,UAChBhB,GAAQA,QAAQc,yBAAyB,IACxC,0CAGQgO,GACXjR,KAAKwR,SAAS,CAAEN,UAAWD,qCAI3B,OACE/C,EAAAN,EAAAO,cAAA,OAAKC,UAAU,OACbF,EAAAN,EAAAO,cAACsD,EAAA,EAAD,KACEvD,EAAAN,EAAAO,cAAA,OAAKC,UAAU,2BACbF,EAAAN,EAAAO,cAACuD,GAAD,MACAxD,EAAAN,EAAAO,cAACwD,GAAD,gBAhCMC,aAwCH3D,eAAS2C,IC7CJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAOjE,EAAAN,EAAAO,cAACiE,GAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjS,KAAK,SAAAkS,GACjCA,EAAaC","file":"static/js/main.bbe8aaad.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\r\n\r\nimport 'firebase/database';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/storage';\r\n\r\nlet firebaseCredentials = {\r\n    apiKey: \"AIzaSyCGkBtUWJUKfMG5BGSfWsko61zlPJ5tAKc\",\r\n    authDomain: \"fest-ab6bd.firebaseapp.com\",\r\n    databaseURL: \"https://fest-ab6bd.firebaseio.com\",\r\n    projectId: \"fest-ab6bd\",\r\n    storageBucket: \"fest-ab6bd.appspot.com\",\r\n    messagingSenderId: \"992214770122\",\r\n    appId: \"1:992214770122:web:d625cc94c61e109b\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseCredentials);\r\nconsole.log(\"HEY\");\r\n\r\nexport const db = firebase.firestore();\r\nexport const firebaseStorage = firebase.storage();\r\nexport const firebaseAuth = firebase.auth();\r\n\r\nexport default db;","import React, { Component } from 'react';\r\nimport { observable, action } from 'mobx';\r\n\r\nexport default class AuthStorage {\r\n    db: any = null;\r\n    auth: any = null;\r\n\r\n    constructor(db: any, auth: any) {\r\n        this.db = db;\r\n        this.auth = auth;\r\n    }\r\n\r\n    @observable user: any = null;\r\n\r\n    @action createNewUser(displayName: string, email: string, password: string) {\r\n        this.auth.createUserWithEmailAndPassword(email, password)\r\n            .then((data: any) => {\r\n                let userData = {\r\n                    uid: data.user.uid,\r\n                    email: data.user.mail,\r\n                    displayName,\r\n                }\r\n\r\n                this.db.collection(\"users\").doc(data.user.uid).set(userData)\r\n                    .then(() => {\r\n                        console.log(\"Document created\");\r\n                    })\r\n                    .catch((error: any) => {\r\n                        console.log(\"Error: \", error);\r\n                    });\r\n            }).catch((error: any) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    @action signIn(email: string, password: string) {\r\n        this.auth.signInWithEmailAndPassword(email, password)\r\n            .catch((error: any) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    @action signOut() {\r\n        this.auth.signOut().then(() => {\r\n\r\n        }).catch((error: any) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    @action userStateListener(setUserOutListener: (state: boolean) => void) {\r\n        this.auth.onAuthStateChanged((user: any) => {\r\n            if (user) {\r\n                this.db.collection(\"users\").doc(user.uid).get()\r\n                    .then((doc: any) => {\r\n                        if (doc.exists) {\r\n                            let userData = {\r\n                                uid: user.uid,\r\n                                email: user.email,\r\n                                displayName: doc.data().displayName,\r\n                            }\r\n\r\n                            this.user = userData;\r\n                            console.log('User connected to DataBase: ', this.user);\r\n                            setUserOutListener(true);\r\n                        } else {\r\n                            console.log('User not available in DataBase');\r\n                        }\r\n                    }).catch((error: any) => {\r\n                        console.log('Error getting User from DataBase', error.message);\r\n                    });\r\n            } else {\r\n                this.user = null;\r\n                console.log('User signed Out');\r\n                setUserOutListener(false);\r\n            }\r\n        });\r\n    }\r\n}","import { observable, action } from 'mobx';\r\nimport db from '../utils/config/firebaseConfig';\r\n\r\nexport default class PostStorage {\r\n    db: any = null;\r\n\r\n    constructor(db: any) {\r\n        this.db = db;\r\n    }\r\n\r\n    @action getPostAutor(uid: string, getAutor: (a: any) => void) {\r\n        let autor: any = null;\r\n\r\n        this.db.collection('users').doc(uid).onSnapshot((doc: any) => {\r\n            autor = doc.data();\r\n        });\r\n    }\r\n}","import { observable, action, toJS, values } from 'mobx';\r\nimport * as Papa from 'papaparse';\r\nimport * as math from 'mathjs'\r\n\r\nimport db, { firebaseAuth, firebaseStorage } from '../utils/config/firebaseConfig';\r\n\r\nimport AuthStorage from './AuthStorage';\r\nimport PostStorage from './PostStorage';\r\n\r\nconst authStorage = new AuthStorage(db, firebaseAuth);\r\nconst postStorage = new PostStorage(db);\r\n\r\n\r\nclass Storage {\r\n    @observable csvFilePath: string = '/data/fest-responses-v2.csv';\r\n    @observable csvDataLines: any = [];\r\n    @observable csvPopulation: any = [];\r\n    @observable cosineResultsData: any = [];\r\n    @observable cosineRanking: any = [];\r\n    @observable imgArray: any = [];\r\n    @observable csvSelected: number = 1;\r\n    @observable csvSelectedGroup: any = [];\r\n    @observable groupResults: any = [];\r\n    @observable festResults: any = [];\r\n\r\n    constructor() {\r\n        this.csvGetData = this.csvGetData.bind(this);\r\n        this.cosineSingularityGeneral = this.cosineSingularityGeneral.bind(this);\r\n        this.csvGetPopulation = this.csvGetPopulation.bind(this);\r\n        this.csvFest = this.csvFest.bind(this);\r\n        this.compareByArrayGroup = this.compareByArrayGroup.bind(this);\r\n\r\n        this.imgArray = [\"https://react.semantic-ui.com/images/avatar/small/helen.jpg\", \"https://react.semantic-ui.com/images/avatar/small/christian.jpg\",\r\n            \"https://react.semantic-ui.com/images/avatar/small/daniel.jpg\", \"https://react.semantic-ui.com/images/avatar/small/stevie.jpg\",\r\n            \"https://react.semantic-ui.com/images/avatar/small/elliot.jpg\", \"https://react.semantic-ui.com/images/avatar/small/tom.jpg\",\r\n            \"https://react.semantic-ui.com/images/avatar/small/christian.jpg\", \"https://react.semantic-ui.com/images/avatar/small/matt.jpg\",\r\n            \"https://react.semantic-ui.com/images/avatar/small/lena.png\", \"https://react.semantic-ui.com/images/avatar/small/lindsay.png\",\r\n            \"https://react.semantic-ui.com/images/avatar/small/mark.png\", \"https://react.semantic-ui.com/images/avatar/small/molly.png\",\r\n            \"https://react.semantic-ui.com/images/avatar/small/rachel.png\", \"https://react.semantic-ui.com/images/avatar/small/lindsay.png\",\r\n            \"https://react.semantic-ui.com/images/avatar/small/matthew.png\", \"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\",\r\n            \"https://react.semantic-ui.com/images/avatar/small/veronika.jpg\"];\r\n    }\r\n\r\n    //* Realiza el fecth donde de manera asíncrona se hace la petición\r\n    //  localmente sobre el archivo CSV, luego de esto, se codifica en UTF-8\r\n    @action csvFetch() {\r\n        return fetch(this.csvFilePath).then(function (response: any) {\r\n            let csvReader = response.body.getReader();\r\n            let csvDecoder = new TextDecoder('utf-8');\r\n\r\n            return csvReader.read().then(function (result: any) {\r\n                return csvDecoder.decode(result.value);\r\n            });\r\n        });\r\n    }\r\n\r\n    //* En este método que se ejecuta tras la promesa del fetch, se agrega cada\r\n    //  línea como un sujeto independiente que permitirá la consulta como matriz\r\n    @action csvGetData(result: any) {\r\n        if (result.data && result.data !== null && result.data !== undefined) {\r\n            result.data.forEach((element: any) => {\r\n                if (element !== undefined) {\r\n                    //console.log(element);\r\n                    this.csvDataLines.push(element);\r\n                }\r\n            });\r\n            //console.log(this.csvDataLines[0][1]);\r\n        }\r\n    }\r\n\r\n    //Population crea el objeto modelo que se encargará de pintar y seleccionar los datos básicos\r\n    //Desarrollo primer punto\r\n\r\n    @action csvGetPopulation() {\r\n        if (this.csvDataLines === 0) return;\r\n        let indexArray = 0;\r\n        this.csvDataLines.forEach((element: any) => {\r\n            let score = [];\r\n\r\n            let scoreByGenres = [];\r\n            let scoreByGenresAvg;\r\n            let scoreByGenresMedian;\r\n            let scoreByGenresMin;\r\n            let scoreByGenresMax;\r\n\r\n            let scoreByArtists = [];\r\n            let scoreByArtistsAvg;\r\n            let scoreByArtistsMedian;\r\n            let scoreByArtistsMin;\r\n            let scoreByArtistsMax;\r\n\r\n            let scoreByFood = [];\r\n            let scoreByFoodAvg;\r\n            let scoreByFoodMedian;\r\n            let scoreByFoodMin;\r\n            let scoreByFoodMax;\r\n\r\n            let scoreByDrink = [];\r\n            let scoreByDrinkAvg;\r\n            let scoreByDrinkMedian;\r\n            let scoreByDrinkMin;\r\n            let scoreByDrinkMax;\r\n\r\n            let scoreByDiet = [];\r\n            let scoreByDietAvg;\r\n            let scoreByDietMedian;\r\n            let scoreByDietMin;\r\n            let scoreByDietMax;\r\n\r\n            for (let index = 0; index < this.csvDataLines[0].length; index++) {\r\n                let scoreData = {\r\n                    catName: this.csvDataLines[0][index],\r\n                    score: element[index],\r\n                }\r\n                score.push(scoreData);\r\n            }\r\n\r\n            scoreByGenres = score.slice(3, 19);\r\n            scoreByGenresMedian = this.medianByArray(scoreByGenres);\r\n            scoreByGenresMin = this.leastMiseryByArray(scoreByGenres, 1);\r\n            scoreByGenresMax = this.mostPleasureByArray(scoreByGenres, 5);\r\n            scoreByGenresAvg = this.averageByArray(scoreByGenres);\r\n\r\n            scoreByArtists = score.slice(19, 65);\r\n            scoreByArtistsMedian = this.medianByArray(scoreByArtists);\r\n            scoreByArtistsMin = this.leastMiseryByArray(scoreByArtists, 1);\r\n            scoreByArtistsMax = this.mostPleasureByArray(scoreByArtists, 5);\r\n            scoreByArtistsAvg = this.averageByArray(scoreByArtists);\r\n\r\n            scoreByDiet = score.slice(65, 68);\r\n            scoreByDietMedian = this.medianByArray(scoreByDiet);\r\n            scoreByDietMin = this.leastMiseryByArray(scoreByDiet, 1);\r\n            scoreByDietMax = this.mostPleasureByArray(scoreByDiet, 5);\r\n            scoreByDietAvg = this.averageByArray(scoreByDiet);\r\n\r\n            scoreByFood = score.slice(68, 94);\r\n            scoreByFoodMedian = this.medianByArray(scoreByFood);\r\n            scoreByFoodMin = this.leastMiseryByArray(scoreByFood, 1);\r\n            scoreByFoodMax = this.mostPleasureByArray(scoreByFood, 5);\r\n            scoreByFoodAvg = this.averageByArray(scoreByFood);\r\n\r\n            scoreByDrink = score.slice(94, 110);\r\n            scoreByDrinkMedian = this.medianByArray(scoreByDrink);\r\n            scoreByDrinkMin = this.leastMiseryByArray(scoreByDrink, 1);\r\n            scoreByDrinkMax = this.mostPleasureByArray(scoreByDrink, 5);\r\n            scoreByDrinkAvg = this.averageByArray(scoreByDrink);\r\n\r\n            let random = Math.floor(Math.random() * (this.imgArray.length - 0)) + 0;\r\n\r\n\r\n            var population = {\r\n                name: element[1],\r\n                age: element[2],\r\n                index: indexArray,\r\n                img: this.imgArray[random],\r\n\r\n                score: score,\r\n\r\n                scoreByGenres: scoreByGenres,\r\n                scoreByGenresMedian: scoreByGenresMedian,\r\n                scoreByGenresMin: scoreByGenresMin,\r\n                scoreByGenresMax: scoreByGenresMax,\r\n                scoreByGenresAvg: scoreByGenresAvg,\r\n\r\n                scoreByArtists: scoreByArtists,\r\n                scoreByArtistsMedian: scoreByArtistsMedian,\r\n                scoreByArtistsMin: scoreByArtistsMin,\r\n                scoreByArtistsMax: scoreByArtistsMax,\r\n                scoreByArtistsAvg: scoreByArtistsAvg,\r\n\r\n                scoreByDiet: scoreByDiet,\r\n                scoreByDietMedian: scoreByDietMedian,\r\n                scoreByDietMin: scoreByDietMin,\r\n                scoreByDietMax: scoreByDietMax,\r\n                scoreByDietAvg: scoreByDietAvg,\r\n\r\n                scoreByFood: scoreByFood,\r\n                scoreByFoodMedian: scoreByFoodMedian,\r\n                scoreByFoodMin: scoreByFoodMin,\r\n                scoreByFoodMax: scoreByFoodMax,\r\n                scoreByFoodAvg: scoreByFoodAvg,\r\n\r\n                scoreByDrink: scoreByDrink,\r\n                scoreByDrinkMedian: scoreByDrinkMedian,\r\n                scoreByDrinkMin: scoreByDrinkMin,\r\n                scoreByDrinkMax: scoreByDrinkMax,\r\n                scoreByDrinkAvg: scoreByDrinkAvg,\r\n            }\r\n\r\n            this.csvPopulation.push(population);\r\n            indexArray += 1;\r\n        });\r\n        console.log(toJS(this.csvPopulation));\r\n    }\r\n\r\n    //* Método asíncrono que cuando se complete la petición realizará el Parse del CSV a texto\r\n    async csvGetDataAsync() {\r\n        let csvData = await this.csvFetch();\r\n\r\n        Papa.parse(csvData, {\r\n            complete: this.csvGetData\r\n        });\r\n    }\r\n\r\n    //Crea el objeto modelo que determina el festival ideal basado en el csv obtenido\r\n\r\n    @action csvFest() {\r\n        if (this.csvPopulation.length === 0) return;\r\n        let festAvgScore = [];\r\n\r\n        let festAvgGenres = [];\r\n        let festAvgGenresMin = [];\r\n        let festAvgGenresMax = [];\r\n\r\n        let festAvgArtists = [];\r\n        let festAvgArtistsMin = [];\r\n        let festAvgArtistsMax = [];\r\n\r\n        let festAvgDiet = [];\r\n        let festAvgDietMin = [];\r\n        let festAvgDietMax = [];\r\n\r\n        let festAvgFood = [];\r\n        let festAvgFoodMin = [];\r\n        let festAvgFoodMax = [];\r\n\r\n        let festAvgDrink = [];\r\n        let festAvgDrinkMin = [];\r\n        let festAvgDrinkMax = [];\r\n\r\n        for (let index = 0; index < 110; index++) {\r\n            var festAvg = 0;\r\n            var sum = 0;\r\n\r\n            this.csvPopulation.slice(1, 110).forEach((element: any) => {\r\n                //console.log(toJS(element.score[index]));\r\n                sum += (parseInt(element.score[index].score));\r\n            });\r\n\r\n            festAvg = (sum / parseInt(this.csvPopulation.length));\r\n            //console.log(festAvg);\r\n\r\n            let userDataAvg = {\r\n                catName: this.csvDataLines[0][index],\r\n                score: festAvg,\r\n            }\r\n\r\n            festAvgScore.push(userDataAvg);\r\n        }\r\n\r\n        festAvgGenres = festAvgScore.slice(3, 19);\r\n        festAvgGenresMin = this.leastMiseryByArray(festAvgGenres, 2).slice(0, 5);\r\n        festAvgGenresMax = this.mostPleasureByArray(festAvgGenres, 3).slice(0, 5);\r\n\r\n        festAvgArtists = festAvgScore.slice(19, 65);\r\n        festAvgArtistsMin = this.leastMiseryByArray(festAvgArtists, 2).slice(0, 5);\r\n        festAvgArtistsMax = this.mostPleasureByArray(festAvgArtists, 3).slice(0, 5);\r\n\r\n        festAvgDiet = festAvgScore.slice(65, 68);\r\n        festAvgDietMin = this.leastMiseryByArray(festAvgDiet, 2).slice(0, 5);\r\n        festAvgDietMax = this.mostPleasureByArray(festAvgDiet, 3).slice(0, 5);\r\n\r\n        festAvgFood = festAvgScore.slice(68, 94);\r\n        festAvgFoodMin = this.leastMiseryByArray(festAvgFood, 3).slice(0, 5);\r\n        festAvgFoodMax = this.mostPleasureByArray(festAvgFood, 3).slice(0, 5);\r\n\r\n        festAvgDrink = festAvgScore.slice(94, 110);\r\n        festAvgDrinkMin = this.leastMiseryByArray(festAvgDrink, 2).slice(0, 5);\r\n        festAvgDrinkMax = this.mostPleasureByArray(festAvgDrink, 3).slice(0, 5);\r\n\r\n        let festResult = {\r\n            festAvgScore: festAvgScore,\r\n\r\n            festAvgGenres: festAvgGenres,\r\n            festAvgGenresMin: festAvgGenresMin,\r\n            festAvgGenresMax: festAvgGenresMax,\r\n\r\n            festAvgArtists: festAvgArtists,\r\n            festAvgArtistsMin: festAvgArtistsMin,\r\n            festAvgArtistsMax: festAvgArtistsMax,\r\n\r\n            festAvgDiet: festAvgDiet,\r\n            festAvgDietMin: festAvgDietMin,\r\n            festAvgDietMax: festAvgDietMax,\r\n\r\n            festAvgFood: festAvgFood,\r\n            festAvgFoodMin: festAvgFoodMin,\r\n            festAvgFoodMax: festAvgFoodMax,\r\n\r\n            festAvgDrink: festAvgDrink,\r\n            festAvgDrinkMin: festAvgDrinkMin,\r\n            festAvgDrinkMax: festAvgDrinkMax,\r\n        }\r\n\r\n        this.festResults.push(festResult);\r\n        console.log(toJS(this.festResults));\r\n    }\r\n\r\n    //Compara el grupo y aplica los algortimos que determinan el promedio entre un grupo aleatorio que el usuario crea\r\n\r\n    @action compareByArrayGroup() {\r\n        if (this.csvSelectedGroup.length === 0) return;\r\n        let groupAvgScore = [];\r\n\r\n        let groupAvgGenres = [];\r\n        let groupAvgGenresMin = [];\r\n        let groupAvgGenresMax = [];\r\n\r\n        let groupAvgArtists = [];\r\n        let groupAvgArtistsMin = [];\r\n        let groupAvgArtistsMax = [];\r\n\r\n        let groupAvgDiet = [];\r\n        let groupAvgDietMin = [];\r\n        let groupAvgDietMax = [];\r\n\r\n        let groupAvgFood = [];\r\n        let groupAvgFoodMin = [];\r\n        let groupAvgFoodMax = [];\r\n\r\n        let groupAvgDrink = [];\r\n        let groupAvgDrinkMin = [];\r\n        let groupAvgDrinkMax = [];\r\n\r\n        for (let index = 0; index < 110; index++) {\r\n            var groupAvg = 0;\r\n            var sum = 0;\r\n\r\n            this.csvSelectedGroup.slice(1, 110).forEach((element: any) => {\r\n                //console.log(toJS(element.score[index]));\r\n                sum += (parseInt(element.score[index].score));\r\n            });\r\n\r\n            groupAvg = (sum / parseInt(this.csvSelectedGroup.length));\r\n            //console.log(groupAvg);\r\n\r\n            let userDataAvg = {\r\n                catName: this.csvDataLines[0][index],\r\n                score: groupAvg,\r\n            }\r\n\r\n            groupAvgScore.push(userDataAvg);\r\n        }\r\n\r\n        groupAvgGenres = groupAvgScore.slice(3, 19);\r\n        groupAvgGenresMin = this.leastMiseryByArray(groupAvgGenres, 2).slice(0, 5);\r\n        groupAvgGenresMax = this.mostPleasureByArray(groupAvgGenres, 3).slice(0, 5);\r\n\r\n        groupAvgArtists = groupAvgScore.slice(19, 65);\r\n        groupAvgArtistsMin = this.leastMiseryByArray(groupAvgArtists, 2).slice(0, 5);\r\n        groupAvgArtistsMax = this.mostPleasureByArray(groupAvgArtists, 3).slice(0, 5);\r\n\r\n        groupAvgDiet = groupAvgScore.slice(65, 68);\r\n        groupAvgDietMin = this.leastMiseryByArray(groupAvgDiet, 2).slice(0, 5);\r\n        groupAvgDietMax = this.mostPleasureByArray(groupAvgDiet, 3).slice(0, 5);\r\n\r\n        groupAvgFood = groupAvgScore.slice(68, 94);\r\n        groupAvgFoodMin = this.leastMiseryByArray(groupAvgFood, 3).slice(0, 5);\r\n        groupAvgFoodMax = this.mostPleasureByArray(groupAvgFood, 3).slice(0, 5);\r\n\r\n        groupAvgDrink = groupAvgScore.slice(94, 110);\r\n        groupAvgDrinkMin = this.leastMiseryByArray(groupAvgDrink, 2).slice(0, 5);\r\n        groupAvgDrinkMax = this.mostPleasureByArray(groupAvgDrink, 3).slice(0, 5);\r\n\r\n        let groupResult = {\r\n            groupAvgScore: groupAvgScore,\r\n\r\n            groupAvgGenres: groupAvgGenres,\r\n            groupAvgGenresMin: groupAvgGenresMin,\r\n            groupAvgGenresMax: groupAvgGenresMax,\r\n\r\n            groupAvgArtists: groupAvgArtists,\r\n            groupAvgArtistsMin: groupAvgArtistsMin,\r\n            groupAvgArtistsMax: groupAvgArtistsMax,\r\n\r\n            groupAvgDiet: groupAvgDiet,\r\n            groupAvgDietMin: groupAvgDietMin,\r\n            groupAvgDietMax: groupAvgDietMax,\r\n\r\n            groupAvgFood: groupAvgFood,\r\n            groupAvgFoodMin: groupAvgFoodMin,\r\n            groupAvgFoodMax: groupAvgFoodMax,\r\n\r\n            groupAvgDrink: groupAvgDrink,\r\n            groupAvgDrinkMin: groupAvgDrinkMin,\r\n            groupAvgDrinkMax: groupAvgDrinkMax,\r\n        }\r\n\r\n        this.groupResults.push(groupResult);\r\n        console.log(toJS(groupResult));\r\n    }\r\n\r\n    //Coseno de singularidad que permite ver la distancia entre dos personas\r\n\r\n    @action cosineSingularityGeneral(userIndex: number) {\r\n        if (this.csvDataLines.length === 0) return;\r\n        let d1 = this.csvDataLines[userIndex];\r\n        //console.log(\"This is the user\", d1);\r\n        for (let index = 1; index < this.csvDataLines.length; index++) {\r\n            let d2 = this.csvDataLines[index];\r\n\r\n            var cosineResults = [];\r\n\r\n            var sumD1D2 = 0;\r\n            var sumD1 = 0;\r\n            var sumD2 = 0;\r\n            var magD1 = 0;\r\n            var magD2 = 0;\r\n\r\n            let scoreFinal;\r\n\r\n            let scoreByGenresValues = [];\r\n            let scoreByGenresValuesAvg: undefined | any;\r\n            let scoreByGenresValuesMedian;\r\n            let scoreByGenresValuesMin;\r\n            let scoreByGenresValuesMax;\r\n            let scoreByGenresValuesStd;\r\n\r\n            let scoreByArtistsValues = [];\r\n            let scoreByArtistsValuesAvg: undefined | any;\r\n            let scoreByArtistsValuesMedian;\r\n            let scoreByArtistsValuesMin;\r\n            let scoreByArtistsValuesMax;\r\n            let scoreByArtistsValuesStd;\r\n\r\n            let scoreByFoodValues = [];\r\n            let scoreByFoodValuesAvg: undefined | any;\r\n            let scoreByFoodValuesMedian;\r\n            let scoreByFoodValuesMin;\r\n            let scoreByFoodValuesMax;\r\n            let scoreByFoodValuesStd;\r\n\r\n            let scoreByDrinkValues = [];\r\n            let scoreByDrinkValuesAvg: undefined | any;\r\n            let scoreByDrinkValuesMedian;\r\n            let scoreByDrinkValuesMin;\r\n            let scoreByDrinkValuesMax;\r\n            let scoreByDrinkValuesStd;\r\n\r\n            let scoreByDietValues = [];\r\n            let scoreByDietValuesAvg: undefined | any;\r\n            let scoreByDietValuesMedian;\r\n            let scoreByDietValuesMin;\r\n            let scoreByDietValuesMax;\r\n            let scoreByDietValuesStd;\r\n\r\n\r\n            for (let indexB = 2; indexB < d2.length; indexB++) {\r\n                sumD1D2 += (parseInt(d1[indexB]) * parseInt(d2[indexB]));\r\n                sumD1 += (parseInt(d1[indexB]) * parseInt(d1[indexB]));\r\n                sumD2 += (parseInt(d2[indexB]) * parseInt(d2[indexB]));\r\n\r\n                magD1 = Math.abs(Math.sqrt(sumD1));\r\n                magD2 = Math.abs(Math.sqrt(sumD2));\r\n\r\n                let result = (sumD1D2 / (magD1 * magD2)) * 100;\r\n\r\n                //console.log(result);\r\n\r\n                let resultData = {\r\n                    catName: this.csvDataLines[0][indexB],\r\n                    score: result,\r\n                }\r\n\r\n                cosineResults.push(resultData);\r\n            }\r\n\r\n            scoreByGenresValues = cosineResults.slice(1, 17);\r\n            scoreByGenresValuesMedian = this.medianByArray(scoreByGenresValues);\r\n            scoreByGenresValuesMin = this.leastMiseryByArrayCosine(scoreByGenresValues).slice(0, 5);\r\n            scoreByGenresValuesMax = this.mostPleasureByArrayCosine(scoreByGenresValues).slice(0, 5);\r\n            scoreByGenresValuesAvg = this.averageByArray(scoreByGenresValues);\r\n            scoreByGenresValuesStd = this.standardDerivation(scoreByGenresValues);\r\n\r\n            scoreByArtistsValues = cosineResults.slice(17, 63);\r\n            scoreByArtistsValuesMedian = this.medianByArray(scoreByArtistsValues);\r\n            scoreByArtistsValuesMin = this.leastMiseryByArrayCosine(scoreByArtistsValues).slice(0, 5);\r\n            scoreByArtistsValuesMax = this.mostPleasureByArrayCosine(scoreByArtistsValues).slice(0, 5);\r\n            scoreByArtistsValuesAvg = this.averageByArray(scoreByArtistsValues);\r\n            scoreByArtistsValuesStd = this.standardDerivation(scoreByArtistsValues);\r\n\r\n            scoreByDietValues = cosineResults.slice(63, 66);\r\n            scoreByDietValuesMedian = this.medianByArray(scoreByDietValues);\r\n            scoreByDietValuesMin = this.leastMiseryByArrayCosine(scoreByDietValues).slice(0, 5);\r\n            scoreByDietValuesMax = this.mostPleasureByArrayCosine(scoreByDietValues).slice(0, 5);\r\n            scoreByDietValuesAvg = this.averageByArray(scoreByDietValues);\r\n            scoreByDietValuesStd = this.standardDerivation(scoreByDietValues);\r\n\r\n            scoreByFoodValues = cosineResults.slice(66, 92);\r\n            scoreByFoodValuesMedian = this.medianByArray(scoreByFoodValues);\r\n            scoreByFoodValuesMin = this.leastMiseryByArrayCosine(scoreByFoodValues).slice(0, 5);\r\n            scoreByFoodValuesMax = this.mostPleasureByArrayCosine(scoreByFoodValues).slice(0, 5);\r\n            scoreByFoodValuesAvg = this.averageByArray(scoreByFoodValues);\r\n            scoreByFoodValuesStd = this.standardDerivation(scoreByFoodValues);\r\n\r\n            scoreByDrinkValues = cosineResults.slice(92, 108);\r\n            scoreByDrinkValuesMedian = this.medianByArray(scoreByDrinkValues);\r\n            scoreByDrinkValuesMin = this.leastMiseryByArrayCosine(scoreByDrinkValues).slice(0, 5);\r\n            scoreByDrinkValuesMax = this.mostPleasureByArrayCosine(scoreByDrinkValues).slice(0, 5);\r\n            scoreByDrinkValuesAvg = this.averageByArray(scoreByDrinkValues);\r\n            scoreByDrinkValuesStd = this.standardDerivation(scoreByDrinkValues);\r\n\r\n            let random = Math.floor(Math.random() * (this.imgArray.length - 0)) + 0;\r\n\r\n            scoreFinal = ((scoreByGenresValuesAvg + scoreByArtistsValuesAvg + scoreByDietValuesAvg + scoreByFoodValuesAvg + scoreByDrinkValuesAvg) / 5);\r\n\r\n            var cosineResultsObj = {\r\n                name: d2[1],\r\n                age: d2[2],\r\n                img: this.imgArray[random],\r\n                cosineResults: cosineResults,\r\n\r\n                scoreByGenresValues: scoreByGenresValues,\r\n                scoreByGenresValuesMedian: scoreByGenresValuesMedian,\r\n                scoreByGenresValuesMin: scoreByGenresValuesMin,\r\n                scoreByGenresValuesMax: scoreByGenresValuesMax,\r\n                scoreByGenresValuesAvg: scoreByGenresValuesAvg,\r\n                scoreByGenresValuesStd: scoreByGenresValuesStd,\r\n\r\n                scoreByArtistsValues: scoreByArtistsValues,\r\n                scoreByArtistsValuesMedian: scoreByArtistsValuesMedian,\r\n                scoreByArtistsValuesMin: scoreByArtistsValuesMin,\r\n                scoreByArtistsValuesMax: scoreByArtistsValuesMax,\r\n                scoreByArtistsValuesAvg: scoreByArtistsValuesAvg,\r\n                scoreByArtistsValuesStd: scoreByArtistsValuesStd,\r\n\r\n                scoreByDietValues: scoreByDietValues,\r\n                scoreByDietValuesMedianMedian: scoreByDietValuesMedian,\r\n                scoreByDietValuesMin: scoreByDietValuesMin,\r\n                scoreByDietValuesMax: scoreByDietValuesMax,\r\n                scoreByDietValuesAvg: scoreByDietValuesAvg,\r\n                scoreByDietValuesStd: scoreByDietValuesStd,\r\n\r\n                scoreByFoodValues: scoreByFoodValues,\r\n                scoreByFoodValuesMedian: scoreByFoodValuesMedian,\r\n                scoreByFoodValuesMin: scoreByFoodValuesMin,\r\n                scoreByFoodValuesMax: scoreByFoodValuesMax,\r\n                scoreByFoodValuesAvg: scoreByFoodValuesAvg,\r\n                scoreByFoodValuesStd: scoreByFoodValuesStd,\r\n\r\n                scoreByDrinkValues: scoreByDrinkValues,\r\n                scoreByDrinkValuesMedian: scoreByDrinkValuesMedian,\r\n                scoreByDrinkValuesMin: scoreByDrinkValuesMin,\r\n                scoreByDrinkValuesMax: scoreByDrinkValuesMax,\r\n                scoreByDrinkValuesAvg: scoreByDrinkValuesAvg,\r\n                scoreByDrinkValuesStd: scoreByDrinkValuesStd,\r\n\r\n                scoreFinal: scoreFinal,\r\n            }\r\n            this.cosineResultsData.push(cosineResultsObj);\r\n        }\r\n        this.cosineRanking = this.rankingByArrayCosine(this.cosineResultsData);\r\n        console.log(toJS(this.cosineResultsData));\r\n        console.log(toJS(this.cosineRanking));\r\n    }\r\n\r\n    @action medianByArray(dataArray: {}[]) {\r\n        let dataArrayValues: any = [];\r\n        dataArray.forEach((element: any) => {\r\n            dataArrayValues.push(parseFloat(element.score));\r\n        });\r\n\r\n        //console.log(dataArrayValues);\r\n        dataArrayValues.sort(function (a: any, b: any) { return a - b });\r\n\r\n        var half = Math.floor(dataArrayValues.length / 2);\r\n\r\n        if (dataArrayValues.length % 2) {\r\n            return dataArrayValues[half];\r\n        } else {\r\n            return (dataArrayValues[half + 1] + dataArrayValues[half]) / 2.0;\r\n        }\r\n    }\r\n\r\n    @action rankingByArrayCosine(dataArray: any) {\r\n        return dataArray.sort((a: any, b: any) => (a.scoreFinal < b.scoreFinal) ? 1 : -1);\r\n    }\r\n\r\n    @action leastMiseryByArrayCosine(dataArray: any) {\r\n        return dataArray.sort((a: any, b: any) => (a.score > b.score) ? 1 : -1);\r\n    }\r\n\r\n    @action mostPleasureByArrayCosine(dataArray: any) {\r\n        return dataArray.sort((a: any, b: any) => (a.score < b.score) ? 1 : -1);\r\n    }\r\n\r\n    @action leastMiseryByArray(dataArray: any, filter: number) {\r\n        return dataArray.filter((a: any) => a.score <= filter);\r\n    }\r\n\r\n    @action mostPleasureByArray(dataArray: any, filter: number) {\r\n        return dataArray.filter((a: any) => a.score >= filter);\r\n    }\r\n\r\n    @action averageByArray(dataArray: any) {\r\n        if (dataArray.length === 0) return;\r\n        let sum = 0;\r\n        let avg = 0;\r\n        dataArray.forEach((element: any) => {\r\n            sum += parseInt(element.score);\r\n        });\r\n        avg = sum / dataArray.length;\r\n\r\n        return avg;\r\n    }\r\n\r\n    @action standardDerivation(dataArray: any) {\r\n        let dataArrayValues: any = [];\r\n        dataArray.forEach((element: any) => {\r\n            dataArrayValues.push(parseFloat(element.score));\r\n        });\r\n        return math.std(dataArrayValues);\r\n    }\r\n}\r\n\r\nconst storage = new Storage();\r\nexport default {\r\n    storage,\r\n    authStorage,\r\n    postStorage,\r\n};","import React, { Component, createRef } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Icon, Item, Sticky, Header, List, Label, Card, Image, Statistic, Rating } from 'semantic-ui-react';\r\n\r\nimport './_Dashboard.scss';\r\n\r\nimport storage from '../../storage/Storage';\r\nimport { toJS } from 'mobx';\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <div className=\"ui equal width grid\">\r\n            <div className=\"row centered\">\r\n                <div className=\"column middle aligned\">\r\n                    <br />\r\n                    <br />\r\n                    <h4>Introducing</h4>\r\n                    <h1><b>FEST</b></h1>\r\n                    <p>A Festival for you and your friends. <br />\r\n                        We know what you like! ;)\r\n                    </p>\r\n                    <Header size='large'>Top 5: Genres</Header>\r\n                    <List horizontal ordered>\r\n                        {storage.storage.festResults[0] && storage.storage.festResults[0].festAvgGenresMax.map((e: any) => {\r\n                            return (\r\n                                <List.Item key={e.catName}>\r\n                                    <Label as='a' color='yellow'>\r\n                                        <Icon size='big' name='music' />\r\n                                        {e.catName}\r\n                                    </Label>\r\n                                </List.Item>\r\n                            );\r\n                        })}\r\n                    </List>\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <Header size='large'>Top 5: Artists | Who you should see</Header>\r\n                    <List horizontal ordered>\r\n                        {storage.storage.festResults[0] && storage.storage.festResults[0].festAvgArtistsMax.map((e: any) => {\r\n                            return (\r\n                                <List.Item key={e.catName}>\r\n                                    <Label as='a' color='teal'>\r\n                                        <Icon size='big' name='star' />\r\n                                        {e.catName}\r\n                                    </Label>\r\n                                </List.Item>\r\n                            );\r\n                        })}\r\n                    </List>\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <Header size='large'>Top 5: Foods | What you should eat</Header>\r\n                    <List horizontal ordered>\r\n                        {storage.storage.festResults[0] && storage.storage.festResults[0].festAvgFoodMax.map((e: any) => {\r\n                            return (\r\n                                <List.Item key={e.catName}>\r\n                                    <Label as='a' color='orange'>\r\n                                        <Icon size='big' name='food' />\r\n                                        {e.catName}\r\n                                    </Label>\r\n                                </List.Item>\r\n                            );\r\n                        })}\r\n                    </List>\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <Header size='large'>Top 5: Drinks | What you should drink</Header>\r\n                    <List horizontal ordered>\r\n                        {storage.storage.festResults[0] && storage.storage.festResults[0].festAvgDrinkMax.map((e: any) => {\r\n                            return (\r\n                                <List.Item key={e.catName}>\r\n                                    <Label as='a' color='pink'>\r\n                                        <Icon size='big' name='bar' />\r\n                                        {e.catName}\r\n                                    </Label>\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                </List.Item>\r\n                            );\r\n                        })}\r\n                    </List>\r\n                </div>\r\n            </div>\r\n            <div className=\"row dashboard\">\r\n                <div className=\"seven wide column population\">\r\n                    <div role=\"list\" className=\"ui medium very relaxed list population__list\">\r\n                        {storage.storage.csvPopulation && storage.storage.csvPopulation.map((pop: any) => {\r\n                            if (pop.index === 0) return;\r\n                            return (\r\n                                <div role=\"listitem\" className=\"item\" key={pop.index}>\r\n                                    <div className=\"column population__buttons\">\r\n                                        <div className=\"right floated content\">\r\n                                            <Button.Group size='tiny'>\r\n                                                <Button onClick={() => {\r\n                                                    storage.storage.csvSelected = pop.index;\r\n                                                    storage.storage.cosineResultsData = [];\r\n                                                    storage.storage.cosineSingularityGeneral(pop.index);\r\n                                                }}>View</Button>\r\n                                                <Button.Or />\r\n                                                <Button onClick={() => {\r\n                                                    storage.storage.groupResults = [];\r\n                                                    storage.storage.csvSelectedGroup.push(storage.storage.csvPopulation[pop.index]);\r\n                                                    storage.storage.compareByArrayGroup();\r\n                                                }}>Add</Button>\r\n                                            </Button.Group>\r\n                                        </div>\r\n                                    </div>\r\n                                    <img src={pop.img} className=\"ui avatar image\" />\r\n                                    <div className=\"content\">\r\n                                        <a className=\"header\">{pop.name}</a>\r\n                                        <div className=\"description\">\r\n                                            Age: <b>{pop.age}</b>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <h1>Your group to compare</h1>\r\n                    <div className=\"row group\">\r\n                        <div className=\"column\">\r\n                            {storage.storage.csvSelectedGroup && storage.storage.csvSelectedGroup.map((e: any) => {\r\n                                return (\r\n                                    <div className=\"group__person\">\r\n                                        <Label key={e.name} as='a' image size='medium'>\r\n                                            <Image src={e.img} size='medium' />\r\n                                            {e.name}\r\n                                            {console.log(e)}\r\n                                        </Label>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        <h1>Recomendation for your group</h1>\r\n                        <Header size='small'>Top 5: Genres</Header>\r\n                        {storage.storage.groupResults[0] && console.log(\"HEY\", storage.storage.groupResults[0].groupAvgGenresMax)}\r\n                        <List horizontal ordered>\r\n                            {storage.storage.groupResults[0] && storage.storage.groupResults[0].groupAvgGenresMax.map((e: any) => {\r\n                                return (\r\n                                    <List.Item key={e.catName}>\r\n                                        <Label as='a' color='yellow'>\r\n                                            <Icon size='small' name='music' />\r\n                                            {e.catName}\r\n                                        </Label>\r\n                                    </List.Item>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <Header size='small'>Top 5: Artists | Who your group should see</Header>\r\n                        <List horizontal ordered>\r\n                            {storage.storage.groupResults[0] && storage.storage.groupResults[0].groupAvgArtistsMax.map((e: any) => {\r\n                                return (\r\n                                    <List.Item key={e.catName}>\r\n                                        <Label as='a' color='teal'>\r\n                                            <Icon size='small' name='star' />\r\n                                            {e.catName}\r\n                                        </Label>\r\n                                    </List.Item>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <Header size='small'>Top 5: Foods | What your group should eat</Header>\r\n                        <List horizontal ordered>\r\n                            {storage.storage.groupResults[0] && storage.storage.groupResults[0].groupAvgFoodMax.map((e: any) => {\r\n                                return (\r\n                                    <List.Item key={e.catName}>\r\n                                        <Label as='a' color='orange'>\r\n                                            <Icon size='small' name='food' />\r\n                                            {e.catName}\r\n                                        </Label>\r\n                                    </List.Item>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <Header size='small'>Top 5: Drinks | What your group should drink</Header>\r\n                        <List horizontal ordered>\r\n                            {storage.storage.groupResults[0] && storage.storage.groupResults[0].groupAvgDrinkMax.map((e: any) => {\r\n                                return (\r\n                                    <List.Item key={e.catName}>\r\n                                        <Label as='a' color='pink'>\r\n                                            <Icon size='small' name='bar' />\r\n                                            {e.catName}\r\n                                        </Label>\r\n                                        <br />\r\n                                        <br />\r\n                                        <br />\r\n                                        <br />\r\n                                        <br />\r\n                                    </List.Item>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"column summary\">\r\n                    <h1>Summary</h1>\r\n                    <div role=\"list\" className=\"ui massive horizontal list\">\r\n                        <div role=\"listitem\" className=\"item\">\r\n                            <img\r\n                                src={storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].img}\r\n                                className=\"ui tiny avatar image\"\r\n                            />\r\n                            <div className=\"content\">\r\n                                <div className=\"header\"><b><a>{storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].name}</a></b></div>\r\n                                I'm <b><a>{storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].age}</a></b>\r\n                            </div>\r\n                            <h3>The things that I love and hate are:</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"ui divided two column grid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"column\">\r\n                                <a className=\"ui green big basic label\">Loved genres</a>\r\n                                <br />\r\n                                <br />\r\n                                <div role=\"list\" className=\"ui horizontal list\">\r\n                                    {storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].scoreByGenresMax.map((e: any) => {\r\n                                        return (\r\n                                            <div key={e.catName + e.score} role=\"listitem\" className=\"item\">\r\n                                                <div className=\"content\">\r\n                                                    <a className=\"ui small green label\">{e.catName}</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <a className=\"ui red big basic label\">Hated genres</a>\r\n                                <br />\r\n                                <br />\r\n                                <div role=\"list\" className=\"ui horizontal list\">\r\n                                    {storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].scoreByGenresMin.map((e: any) => {\r\n                                        return (\r\n                                            <div key={e.catName + e.score} role=\"listitem\" className=\"item\">\r\n                                                <div className=\"content\">\r\n                                                    <a className=\"ui small red label\">{e.catName}</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"ui divided two column grid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"column\">\r\n                                <a className=\"ui green big basic label\">Loved Artists</a>\r\n                                <br />\r\n                                <br />\r\n                                <div role=\"list\" className=\"ui horizontal list\">\r\n                                    {storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].scoreByArtistsMax.map((e: any) => {\r\n                                        return (\r\n                                            <div key={e.catName + e.score} role=\"listitem\" className=\"item\">\r\n                                                <div className=\"content\">\r\n                                                    <a className=\"ui small green label\">{e.catName}</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <a className=\"ui red big basic label\">Hated Artists</a>\r\n                                <br />\r\n                                <br />\r\n                                <div role=\"list\" className=\"ui horizontal list\">\r\n                                    {storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].scoreByArtistsMin.map((e: any) => {\r\n                                        return (\r\n                                            <div key={e.catName + e.score} role=\"listitem\" className=\"item\">\r\n                                                <div className=\"content\">\r\n                                                    <a className=\"ui small red label\">{e.catName}</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"ui divided two column grid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"column\">\r\n                                <a className=\"ui green big basic label\">Loved Foods</a>\r\n                                <br />\r\n                                <br />\r\n                                <div role=\"list\" className=\"ui horizontal list\">\r\n                                    {storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].scoreByFoodMax.map((e: any) => {\r\n                                        return (\r\n                                            <div key={e.catName + e.score} role=\"listitem\" className=\"item\">\r\n                                                <div className=\"content\">\r\n                                                    <a className=\"ui small green label\">{e.catName}</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <a className=\"ui red big basic label\">Hated Foods</a>\r\n                                <br />\r\n                                <br />\r\n                                <div role=\"list\" className=\"ui horizontal list\">\r\n                                    {storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].scoreByFoodMin.map((e: any) => {\r\n                                        return (\r\n                                            <div key={e.catName + e.score} role=\"listitem\" className=\"item\">\r\n                                                <div className=\"content\">\r\n                                                    <a className=\"ui small red label\">{e.catName}</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"ui divided two column grid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"column\">\r\n                                <a className=\"ui green big basic label\">Loved Drinks</a>\r\n                                <br />\r\n                                <br />\r\n                                <div role=\"list\" className=\"ui horizontal list\">\r\n                                    {storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].scoreByDrinkMax.map((e: any) => {\r\n                                        return (\r\n                                            <div key={e.catName + e.score} role=\"listitem\" className=\"item\">\r\n                                                <div className=\"content\">\r\n                                                    <a className=\"ui small green label\">{e.catName}</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <a className=\"ui red big basic label\">Hated Drinks</a>\r\n                                <br />\r\n                                <br />\r\n                                <div role=\"list\" className=\"ui horizontal list\">\r\n                                    {storage.storage.csvPopulation[storage.storage.csvSelected] && storage.storage.csvPopulation[storage.storage.csvSelected].scoreByDrinkMin.map((e: any) => {\r\n                                        return (\r\n                                            <div key={e.catName + e.score} role=\"listitem\" className=\"item\">\r\n                                                <div className=\"content\">\r\n                                                    <a className=\"ui small red label\">{e.catName}</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"row date\">\r\n                        <h1>Your perfect date for the festival</h1>\r\n                        <br />\r\n                        <br />\r\n                        <div className=\"ui divided two column grid\">\r\n                            <div className=\"column\">\r\n                                <Card color='pink'>\r\n                                    <Image src={storage.storage.cosineRanking[1] && storage.storage.cosineRanking[1].img} wrapped ui={false} />\r\n                                    <Card.Content>\r\n                                        <Card.Header>{storage.storage.cosineRanking[1] && storage.storage.cosineRanking[1].name}</Card.Header>\r\n                                        <Card.Meta>I'm {storage.storage.cosineRanking[1] && storage.storage.cosineRanking[1].age}</Card.Meta>\r\n                                        {storage.storage.cosineRanking[1] && console.log(storage.storage.cosineRanking[1])}\r\n                                        <br />\r\n                                        <Rating maxRating={5} defaultRating={5} icon='heart' size='massive' />\r\n                                    </Card.Content>\r\n                                </Card>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <Statistic color='pink'>\r\n                                    <Statistic.Value>{storage.storage.cosineRanking[1] && parseInt(storage.storage.cosineRanking[1].scoreFinal)}%</Statistic.Value>\r\n                                    <Statistic.Label>Match</Statistic.Label>\r\n                                </Statistic>\r\n                                <br />\r\n                                <Button animated='vertical' color=\"pink\">\r\n                                    <Button.Content hidden>Chat</Button.Content>\r\n                                    <Button.Content visible>\r\n                                        <Icon name='heart' />\r\n                                    </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"row gang\">\r\n                        <h1>Your gang squad for the festival</h1>\r\n                        <br />\r\n                        <br />\r\n                        {storage.storage.cosineRanking && storage.storage.cosineRanking.slice(2, 7).map((e: any) => {\r\n                            return (\r\n                                <div className=\"column gang__person\">\r\n                                    <Label as='a' color='yellow' image size='big'>\r\n                                        <Image src={e.img} size='big' />\r\n                                        {e.name}\r\n                                        <Label.Detail><b>{e.age}</b></Label.Detail>\r\n                                        <Label.Detail><b>{parseInt(e.scoreFinal)}%</b></Label.Detail>\r\n                                    </Label>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default observer(Dashboard);","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport './_Banner.scss';\r\n\r\nconst Banner = () => {\r\n    return (\r\n        <div className=\"row banner\">\r\n            <div className=\"column middle aligned\">\r\n                <img className=\"ui medium centered image\" src=\"/images/I.Fest - Logo.svg\" alt=\"Logo\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default observer(Banner);","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nimport Dashboard from '../Dashboard/Dashboard';\nimport Auth from '../Auth/Auth';\nimport Banner from '../Banner/Banner';\nimport storage from '../../storage/Storage';\n\ninterface AppProps {\n  history?: any\n}\n\ninterface AppState {\n  userState?: boolean\n}\n\nclass App extends Component<AppProps, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      userState: true,\n    }\n\n    this.setUserState = this.setUserState.bind(this);\n  }\n\n  //* Ejecutará el métdo asíncrono, ya que se usa Fetch\n  componentDidMount() {\n    storage.authStorage.userStateListener(this.setUserState);\n    storage.storage.csvGetDataAsync();\n    setTimeout(() => {\n      storage.storage.csvGetPopulation();\n      storage.storage.csvFest();\n      storage.storage.cosineSingularityGeneral(1);\n    }, 1000);\n  }\n\n  setUserState(state: boolean): void {\n    this.setState({ userState: state })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div className=\"app ui equal width grid\">\n            <Banner />\n            <Dashboard />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}